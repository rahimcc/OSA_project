        -:    0:Source:detecter.c
        -:    0:Programs:2
        -:    1:
        -:    2:/*
        -:    3:    OPERATING SYSTEM ARCHITECTURE COURSE PROJECT 
        -:    4:
        -:    5:SARA SHAMILOVA 
        -:    6:RAHIM SHARIFOV
        -:    7:SABINA HADJIMURADOVA
        -:    8:
        -:    9:MARCH 2019
        -:   10:
        -:   11:*/
        -:   12:
        -:   13:
        -:   14:#include <stdio.h>
        -:   15:#include <sys/wait.h>
        -:   16:#include <unistd.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <getopt.h>
        -:   19:#include <time.h>
        -:   20:#include <math.h>
        -:   21:#include <limits.h>
        -:   22:#include "DetecLib.h"
        -:   23:
        -:   24:
        3:   25:int main (int argc, char* argv[]){   
        -:   26:    
        3:   27:    if (argc==1) {
    #####:   28:        printf("Usage: ./detect [-t format] [-i interval] [-l limit] [-c] prog arg arg \n");
    #####:   29:        exit(1);
        -:   30:    }
        -:   31:
        3:   32:char *format=NULL;    // time format that is to be printed, NULL by default that is time is not going to be printed 
        3:   33:int  interval=10000;  //interval between two consecutive launch in millisecond, 10000 by default that is 10 seconds between each launch 
        3:   34:int  limit=-1;      // limit which is number of times that program is going to be executed, -1 by default that is command is going to be executed infinite times 
        3:   35:int  EXIT=0;    //variable to check the condition whether print exit value, 0 by default that is exit value is not going to be printed 
        -:   36:char option;   // option that getopt takes from command line at a time                                          
        -:   37:                                             
        -:   38:                            
       15:   39:    while ((option=getopt(argc,argv,"+t:i:l:c"))!=-1){  // getopt is not POSIXLY CORRECT, '+' is for getopt to stop when encounter non '-' argument  
        9:   40:        switch (option){
        1:   41:            case 't':
        1:   42:                format=optarg;  //assinging argument of option t, as a format for printing time  
        1:   43:                break;
        3:   44:            case 'i':
        3:   45:                interval=atoi(optarg)*1000; //assigning argument of option i, as a time interval between to consecutive launch 
        3:   46:                if (interval  == 0 ){     
    #####:   47:                    printf ("NUll interval \n ");  // Program exits when null interval is given  
    #####:   48:                    exit (1);
        -:   49:                }
        -:   50:
        3:   51:                if (interval  < 0 ){
    #####:   52:                    printf ("Negative interval \n "); // Program exits when negative interval is given 
    #####:   53:                    exit (1);
        -:   54:                } 
        3:   55:                break;
        3:   56:            case 'l':  
        3:   57:                limit=atoi(optarg); // assigning argument of option l, as a limit for command launches 
        3:   58:                if (limit <= 0){
    #####:   59:                    printf("%d", limit);
    #####:   60:                    printf ("Invalid value for limit \n "); //Program exits when limit is negative or 0 
    #####:   61:                    exit(1);
        -:   62:                } 
        3:   63:                break;
        -:   64:
        2:   65:            case 'c':
        2:   66:                EXIT=1;  // changing state of EXIT to print exit value of command  
        2:   67:                break;
    #####:   68:            default:
    #####:   69:                printf ("INVALID OPTION %c \n", option); // ERROR message when an invalid option is given 
    #####:   70:                exit(1);
        -:   71:        }   
        -:   72:    } 
        -:   73:    
        -:   74:
        -:   75:   
        3:   76:    if (argv[optind]==NULL){  
    #####:   77:        printf("--null program\n"); //Program exits when no command is given to execute 
    #####:   78:        exit(1);  
        -:   79:    }
        -:   80:
        -:   81:char **args;        //declaring double pointer to store array of strings
        3:   82:args=argv+optind;   //assigning pointer that points to command and its arguments to newly created pointer 
        -:   83:
        3:   84:    launch(limit,EXIT,args,interval,format); //function that is takes all arguments prints in displat what is needed 
        -:   85:    
        2:   86:return 0;
        -:   87:
        -:   88:}    
