        -:    0:Source:detecter.c
        -:    0:Programs:2
        -:    1:
        -:    2:/*
        -:    3:    OPERATING SYSTEM ARCHITECTURE COURSE PROJECT 
        -:    4:
        -:    5:SARA SHAMILOVA 
        -:    6:RAHIM SHARIFOV
        -:    7:
        -:    8:MARCH 2019
        -:    9:
        -:   10:*/
        -:   11:
        -:   12:
        -:   13:#include <stdio.h>
        -:   14:#include <sys/wait.h>
        -:   15:#include <unistd.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <getopt.h>
        -:   18:#include <time.h>
        -:   19:#include "DetecLib.h"
        -:   20:#include <math.h>
        -:   21:
        -:   22:
        1:   23:int main (int argc, char* argv[]){   
        -:   24:    
        1:   25:    if (argc==1) {
    #####:   26:        printf("Usage: ./detect [-t format] [-i interval] [-l limit] [-c] prog arg arg \n");
    #####:   27:        exit(1);
        -:   28:    }
        -:   29:
        1:   30:char *format=NULL;    // time format that is to be printed, NULL by default that is time is not going to be printed 
        1:   31:int  interval=10000;  //interval between two consecutive launch in millisecond, 10000 by default that is 10 seconds between each launch 
        1:   32:int  limit=MAX;      // limit which is number of times that program is going to be executed, -1 by default that is command is going to be executed infinite times 
        1:   33:int  EXIT=0;    //variable to check the condition whether print exit value, 0 by default that is exit value is not going to be printed 
        -:   34:char option;   // option that getopt takes from command line at a time                                          
        -:   35:                                             
        -:   36:                            
        5:   37:    while ((option=getopt(argc,argv,"+t:i:l:c"))!=-1){  // getopt is not POSIXLY CORRECT, '+' is for getopt to stop when encounter non '-' argument  
        3:   38:        switch (option){
        1:   39:            case 't':
        1:   40:                format=optarg;  //assinging argument of option t, as a format for printing time  
        1:   41:                break;
        1:   42:            case 'i':
        1:   43:                interval=atoi(optarg)*1000; //assigning argument of option i, as a time interval between to consecutive launch 
        1:   44:                break;
        1:   45:            case 'l':  
        1:   46:                limit=atoi(optarg); // assigning argument of option l, as a limit for command launches 
        1:   47:                break;
    #####:   48:            case 'c':
    #####:   49:                EXIT=1;  // changing state of EXIT to print exit value of command  
    #####:   50:                break;
    #####:   51:            default:
    #####:   52:                printf ("INVALID OPTION %c \n", option); // ERROR message when an invalid option is given 
    #####:   53:                exit(1);
        -:   54:        }   
        -:   55:    } 
        1:   56:    if (interval  == 0 ){     
    #####:   57:        printf ("NUll interval \n ");  // Program exits when null interval is given  
    #####:   58:        exit (1);
        -:   59:    }
        -:   60:
        1:   61:    if (interval  < 0 ){
    #####:   62:        printf ("Negative interval \n "); // Program exits when negative interval is given 
    #####:   63:        exit (1);
        -:   64:    } 
        -:   65:    
        1:   66:    if (limit <= 0){
    #####:   67:        printf ("Invalid value for limit \n "); //Program exits when limit is negative or 0 
    #####:   68:        exit(1);
        -:   69:    } 
        -:   70:
        1:   71:    if (argv[optind]==NULL){  
    #####:   72:        printf("--null program\n"); //Program exits when no command is given to execute 
    #####:   73:        exit(1);  
        -:   74:    }
        -:   75:
        -:   76:char **args;        //declaring double pointer to store array of strings
        1:   77:args=argv+optind;   //assigning pointer that points to command and its arguments to newly created pointer 
        -:   78:
        1:   79:    launch(limit,EXIT,args,interval,format); //function that is takes all arguments prints in displat what is needed 
        -:   80:    
        1:   81:return 0;
        -:   82:}    
